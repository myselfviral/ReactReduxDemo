'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _d3Shape = require('d3-shape');

var _Context = require('../utils/Context');

var _Utils = require('../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Curves = require('../utils/Curves');

var _Curves2 = _interopRequireDefault(_Curves);

var _interactionMethods = require('../utils/interactionMethods');

var _Path = require('../primitives/Path');

var _Path2 = _interopRequireDefault(_Path);

var _Line = require('../primitives/Line');

var _Line2 = _interopRequireDefault(_Line);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var lineDefaultStyle = {
  strokeWidth: 3
};

var Area = function (_React$PureComponent) {
  _inherits(Area, _React$PureComponent);

  function Area(props) {
    _classCallCheck(this, Area);

    var _this = _possibleConstructorReturn(this, (Area.__proto__ || Object.getPrototypeOf(Area)).call(this, props));

    _initialiseProps.call(_this);

    if (!props.hoverMode) {
      _this.props.dispatch(function (state) {
        return _extends({}, state, {
          hoverMode: 'primary'
        });
      });
    }
    _this.selectSeries = _interactionMethods.selectSeries.bind(_this);
    _this.hoverSeries = _interactionMethods.hoverSeries.bind(_this);
    _this.selectDatum = _interactionMethods.selectDatum.bind(_this);
    _this.hoverDatum = _interactionMethods.hoverDatum.bind(_this);
    return _this;
  }

  _createClass(Area, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updatePath(this.props);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.updatePath(this.props);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          series = _props.series,
          visibility = _props.visibility,
          showOrphans = _props.showOrphans,
          selected = _props.selected,
          hovered = _props.hovered,
          interaction = _props.interaction;
      var _state = this.state,
          areaPath = _state.areaPath,
          linePath = _state.linePath;


      var status = _Utils2.default.getStatus(series, hovered, selected);
      var style = series.getStatusStyle(status);

      var interactiveSeries = interaction === 'series';
      var seriesInteractionProps = interactiveSeries ? {
        onClick: function onClick() {
          return _this2.selectSeries(series);
        },
        onMouseEnter: function onMouseEnter() {
          return _this2.hoverSeries(series);
        },
        onMouseMove: function onMouseMove() {
          return _this2.hoverSeries(series);
        },
        onMouseLeave: function onMouseLeave() {
          return _this2.hoverSeries(null);
        }
      } : {};

      return _react2.default.createElement(
        'g',
        null,
        _react2.default.createElement(_Path2.default, _extends({
          d: areaPath,
          style: _extends({}, style, style.area, {
            stroke: 'transparent',
            pointerEvents: interactiveSeries ? 'all' : 'none'
          }),
          opacity: visibility
        }, seriesInteractionProps)),
        _react2.default.createElement(_Path2.default, _extends({
          d: linePath,
          style: _extends({}, style, style.line, {
            fill: 'none',
            pointerEvents: interactiveSeries ? 'all' : 'none'
          }),
          opacity: visibility
        }, seriesInteractionProps)),
        series.datums.map(function (datum, i, all) {
          // Don't render points on the line, just null data orphans
          var prev = all[i - 1] || { defined: true };
          var next = all[i + 1] || { defined: true };
          if (!datum.defined || prev.defined && next.defined) {
            return null;
          }

          var dataStyle = datum.getStatusStyle(_Utils2.default.getStatus(datum, hovered, selected));

          if (!showOrphans) {
            return null;
          }

          var interactiveDatum = interaction === 'element';
          var datumInteractionProps = interactiveDatum ? {
            onClick: function onClick() {
              return _this2.selectDatum(datum);
            },
            onMouseEnter: function onMouseEnter() {
              return _this2.hoverDatum(datum);
            },
            onMouseMove: function onMouseMove() {
              return _this2.hoverDatum(datum);
            },
            onMouseLeave: function onMouseLeave() {
              return _this2.hoverDatum(null);
            }
          } : {};

          return _react2.default.createElement(_Line2.default, _extends({
            style: _extends({}, lineDefaultStyle, style, style.line, dataStyle, dataStyle.line, {
              pointerEvents: interactiveSeries ? 'all' : 'none'
            }),
            key: i,
            x1: !datum || Number.isNaN(datum.x) ? null : datum.x,
            y1: !datum || Number.isNaN(datum.base) ? null : datum.base,
            x2: !datum || Number.isNaN(datum.x) ? null : datum.x,
            y2: !datum || Number.isNaN(datum.y) ? null : datum.y,
            opacity: visibility
          }, seriesInteractionProps, datumInteractionProps));
        })
      );
    }
  }]);

  return Area;
}(_react2.default.PureComponent);

Area.defaultProps = {
  showOrphans: true,
  curve: 'monotoneX'
};

Area.plotDatum = function (datum, _ref) {
  var primaryAxis = _ref.primaryAxis,
      xAxis = _ref.xAxis,
      yAxis = _ref.yAxis;

  datum.x = xAxis.scale(datum.xValue);
  datum.y = yAxis.scale(datum.yValue);
  datum.defined = _Utils2.default.isValidPoint(datum.xValue) && _Utils2.default.isValidPoint(datum.yValue);
  datum.base = primaryAxis.vertical ? xAxis.scale(datum.baseValue) : yAxis.scale(datum.baseValue);
  // Adjust non-bar elements for ordinal scales
  if (xAxis.type === 'ordinal') {
    datum.x += xAxis.tickOffset;
  }
  if (yAxis.type === 'ordinal') {
    datum.y += yAxis.tickOffset;
  }

  // Set the default focus point
  datum.focus = {
    x: datum.x,
    y: datum.y

    // Set the pointer points (used in voronoi)
  };datum.pointerPoints = [datum.focus, {
    x: primaryAxis.vertical ? primaryAxis.position === 'left' ? datum.base - 1 : datum.base : datum.focus.x,
    y: !primaryAxis.vertical ? primaryAxis.position === 'bottom' ? datum.base - 1 : datum.base : datum.focus.y
  }];
};

Area.buildStyles = function (series, _ref2) {
  var getStyles = _ref2.getStyles,
      getDatumStyles = _ref2.getDatumStyles,
      defaultColors = _ref2.defaultColors;

  var defaults = {
    // Pass some sane defaults
    color: defaultColors[series.index % (defaultColors.length - 1)]
  };

  series.getStatusStyle = function (status) {
    series.style = _Utils2.default.getStatusStyle(series, status, getStyles, defaults);
    return series.style;
  };

  // We also need to decorate each datum in the same fashion
  series.datums.forEach(function (datum) {
    datum.getStatusStyle = function (status) {
      datum.style = _Utils2.default.getStatusStyle(datum, status, getDatumStyles, defaults);
      return datum.style;
    };
  });
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.state = {};

  this.updatePath = function (props) {
    var curve = props.curve,
        series = props.series;

    var areaFn = (0, _d3Shape.area)().x(function (d) {
      return d.x;
    }).y0(function (d) {
      return d.base;
    }).y1(function (d) {
      return d.y;
    }).defined(function (d) {
      return d.defined;
    }).curve(_Curves2.default[curve] || curve);

    var lineFn = (0, _d3Shape.line)().x(function (d) {
      return d.x;
    }).y(function (d) {
      return d.y;
    }).defined(function (d) {
      return d.defined;
    }).curve(_Curves2.default[curve] || curve);

    _this3.setState({
      areaPath: areaFn(series.datums),
      linePath: lineFn(series.datums)
    });
  };
};

exports.default = (0, _Context.ChartConnect)(function (state) {
  return {
    hovered: state.hovered,
    selected: state.selected,
    interaction: state.interaction
  };
})(Area);