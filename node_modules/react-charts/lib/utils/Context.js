'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointerConnect = exports.ChartConnect = exports.PointerProvider = exports.ChartProvider = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ChartContext = _react2.default.createContext(null);
var PointerContext = _react2.default.createContext(null);

var ChartProvider = exports.ChartProvider = ChartContext.Provider;
var PointerProvider = exports.PointerProvider = PointerContext.Provider;

var Connect = function Connect(Consumer) {
  return function (subscribe) {
    return function (Comp) {
      var Connected = function (_React$PureComponent) {
        _inherits(Connected, _React$PureComponent);

        function Connected() {
          _classCallCheck(this, Connected);

          var _this = _possibleConstructorReturn(this, (Connected.__proto__ || Object.getPrototypeOf(Connected)).call(this));

          _this.subscriber = typeof subscribe({}) === 'function' ? subscribe() : subscribe;
          return _this;
        }

        _createClass(Connected, [{
          key: 'render',
          value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
              Consumer,
              null,
              function (_ref) {
                var dispatch = _ref.dispatch,
                    rest = _objectWithoutProperties(_ref, ['dispatch']);

                return _react2.default.createElement(Comp, _extends({}, _this2.props, _this2.subscriber(rest, _this2.props), { dispatch: dispatch }));
              }
            );
          }
        }]);

        return Connected;
      }(_react2.default.PureComponent);

      (0, _hoistNonReactStatics2.default)(Connected, Comp);
      return Connected;
    };
  };
};

var ChartConnect = exports.ChartConnect = Connect(ChartContext.Consumer);
var PointerConnect = exports.PointerConnect = Connect(PointerContext.Consumer);