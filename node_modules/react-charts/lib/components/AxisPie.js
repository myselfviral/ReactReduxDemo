'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.positionLeft = exports.positionBottom = exports.positionRight = exports.positionTop = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Context = require('../utils/Context');

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

var _AxisPie = require('./AxisPie.updateScale');

var _AxisPie2 = _interopRequireDefault(_AxisPie);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


// const fontSize = 10

var positionTop = exports.positionTop = 'top';
var positionRight = exports.positionRight = 'right';
var positionBottom = exports.positionBottom = 'bottom';
var positionLeft = exports.positionLeft = 'left';

var AxisPie = function (_React$Component) {
  _inherits(AxisPie, _React$Component);

  // Lifecycle
  function AxisPie() {
    _classCallCheck(this, AxisPie);

    var _this = _possibleConstructorReturn(this, (AxisPie.__proto__ || Object.getPrototypeOf(AxisPie)).call(this));

    _this.updateScale = _AxisPie2.default.bind(_this);
    return _this;
  }

  _createClass(AxisPie, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateScale(this.props);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(oldProps) {
      // If any of the following change,
      // we need to update the axis
      if (this.props.materializedData !== oldProps.materializedData || this.props.height !== oldProps.height || this.props.width !== oldProps.width) {
        this.updateScale(this.props);
      }

      if (this.props.stackData !== oldProps.stackData) {
        this.updateStackData(this.props);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      // TODO: This is where permanent labels and lines will be drawn
      return null;
    }
  }]);

  return AxisPie;
}(_react2.default.Component);

AxisPie.defaultProps = {
  tickArguments: [],
  tickValues: null,
  tickFormat: null,
  tickSizeInner: 6,
  tickSizeOuter: 6,
  tickPadding: 3,
  cutoutPercentage: 0.5,
  outerPadding: 10,
  cornerRadius: 1,
  arcPadding: 0.2,
  seriesPadding: 0.2 };
exports.default = (0, _Context.ChartConnect)(function () {
  var selectors = {
    gridWidth: _Selectors2.default.gridWidth(),
    gridHeight: _Selectors2.default.gridHeight()
  };
  return function (state) {
    return {
      materializedData: state.materializedData,
      width: selectors.gridWidth(state),
      height: selectors.gridHeight(state)
    };
  };
})(AxisPie);