'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Context = require('../utils/Context');

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


// import Rectangle from '../primitives/Rectangle'

var Brush = function (_React$PureComponent) {
  _inherits(Brush, _React$PureComponent);

  function Brush() {
    _classCallCheck(this, Brush);

    return _possibleConstructorReturn(this, (Brush.__proto__ || Object.getPrototypeOf(Brush)).apply(this, arguments));
  }

  _createClass(Brush, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(oldProps) {
      var onSelect = oldProps.onSelect,
          pointer = oldProps.pointer,
          primaryAxes = oldProps.primaryAxes;

      if (oldProps.pointer && this.props.pointer.released !== oldProps.pointer.released) {
        if (Math.abs(pointer.sourceX - pointer.x) < 20) {
          return;
        }
        onSelect({
          pointer: this.props.pointer.released,
          start: primaryAxes[0].scale.invert(pointer.sourceX),
          end: primaryAxes[0].scale.invert(pointer.x)
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          _props$pointer = _props.pointer,
          pointer = _props$pointer === undefined ? {} : _props$pointer,
          offset = _props.offset,
          gridX = _props.gridX,
          gridY = _props.gridY,
          gridHeight = _props.gridHeight,
          dark = _props.dark,
          _props$style = _props.style,
          style = _props$style === undefined ? {} : _props$style;


      return _react2.default.createElement(
        'div',
        {
          className: 'Brush',
          style: {
            pointerEvents: 'none',
            position: 'absolute',
            left: 0,
            top: 0,
            transform: 'translate3d(' + (offset.left + gridX) + 'px, ' + (offset.top + gridY) + 'px, 0)',
            opacity: pointer.dragging ? Math.abs(pointer.sourceX - pointer.x) < 20 ? 0.5 : 1 : 0
          }
        },
        _react2.default.createElement('div', {
          style: _extends({
            position: 'absolute',
            transform: 'translate3d(' + Math.min(pointer.x, pointer.sourceX) + 'px, 0px, 0)',
            width: Math.abs(pointer.x - pointer.sourceX) + 'px',
            height: gridHeight + 'px',
            background: dark ? 'rgba(255,255,255,.3)' : 'rgba(0, 26, 39, 0.3)'
          }, style)
        })
      );
    }
  }]);

  return Brush;
}(_react2.default.PureComponent);

Brush.defaultProps = {
  onSelect: function onSelect() {}
};
Brush.isHtml = true;
exports.default = (0, _Context.PointerConnect)(function (state) {
  return {
    pointer: state.pointer
  };
})((0, _Context.ChartConnect)(function () {
  var selectors = {
    primaryAxes: _Selectors2.default.primaryAxes(),
    offset: _Selectors2.default.offset(),
    gridHeight: _Selectors2.default.gridHeight(),
    gridX: _Selectors2.default.gridX(),
    gridY: _Selectors2.default.gridY()
  };
  return function (state) {
    return {
      primaryAxes: selectors.primaryAxes(state),
      offset: selectors.offset(state),
      gridHeight: selectors.gridHeight(state),
      gridX: selectors.gridX(state),
      gridY: selectors.gridY(state),
      dark: state.dark
    };
  };
})(Brush));