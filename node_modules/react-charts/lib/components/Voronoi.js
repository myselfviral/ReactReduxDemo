'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _d3Voronoi = require('d3-voronoi');

var _d3Shape = require('d3-shape');

var _Path = require('../primitives/Path');

var _Path2 = _interopRequireDefault(_Path);

var _Context = require('../utils/Context');

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

var _Utils = require('../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var noop = function noop() {
  return null;
};

var modeClosestPoint = 'closestPoint';
var modePrimary = 'primary';
var modeSecondary = 'secondary';
var modeRadial = 'radial';

var Voronoi = function (_React$PureComponent) {
  _inherits(Voronoi, _React$PureComponent);

  function Voronoi() {
    _classCallCheck(this, Voronoi);

    var _this = _possibleConstructorReturn(this, (Voronoi.__proto__ || Object.getPrototypeOf(Voronoi)).call(this));

    _this.onHover = _this.onHover.bind(_this);
    return _this;
  }

  _createClass(Voronoi, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          hoverMode = _props.hoverMode,
          stackData = _props.stackData,
          primaryAxes = _props.primaryAxes,
          secondaryAxes = _props.secondaryAxes,
          showVoronoi = _props.showVoronoi;

      // Don't render until we have all dependencies

      if (!stackData || !primaryAxes.length || !secondaryAxes.length) {
        return null;
      }

      var primaryVertical = primaryAxes.find(function (d) {
        return d.vertical;
      });

      var xScales = primaryVertical ? secondaryAxes : primaryAxes;
      var yScales = primaryVertical ? primaryAxes : secondaryAxes;

      var extent = [[xScales[0].scale.range()[0], yScales[0].scale.range()[1]], [xScales[0].scale.range()[1], yScales[0].scale.range()[0]]];
      var lineFn = (0, _d3Shape.line)();

      var VoronoiElement = function VoronoiElement(_ref) {
        var children = _ref.children,
            rest = _objectWithoutProperties(_ref, ['children']);

        return _react2.default.createElement(
          'g',
          _extends({ className: 'Voronoi', onMouseLeave: function onMouseLeave() {
              return _this2.onHover(null);
            } }, rest),
          children
        );
      };

      if (hoverMode === modeRadial) {
        var primaryAxis = primaryAxes[0];

        return _react2.default.createElement(
          VoronoiElement,
          {
            style: {
              transform: 'translate3d(' + primaryAxis.width / 2 + 'px, ' + primaryAxis.height / 2 + 'px, 0)'
            }
          },
          stackData.map(function (series) {
            return _react2.default.createElement(
              _react2.default.Fragment,
              { key: series.index },
              series.datums.map(function (datum, i) {
                var arc = (0, _d3Shape.arc)().startAngle(datum.arcData.startAngle).endAngle(datum.arcData.endAngle).padAngle(0).padRadius(0).innerRadius(!series.index ? 0 : datum.arcData.innerRadius - datum.arcData.seriesPaddingRadius / 2).outerRadius(series.index === stackData.length - 1 ? Math.max(primaryAxis.width, primaryAxis.height) : datum.arcData.outerRadius + datum.arcData.seriesPaddingRadius / 2).cornerRadius(0);

                return _react2.default.createElement(_Path2.default, {
                  key: i,
                  d: arc(),
                  className: 'action-voronoi',
                  onMouseEnter: function onMouseEnter() {
                    return _this2.onHover([datum]);
                  },
                  style: {
                    fill: 'rgba(0,0,0,.2)',
                    stroke: 'rgba(255,255,255,.5)',
                    opacity: showVoronoi ? 1 : 0,
                    transition: 'none'
                  }
                });
              })
            );
          })
        );
      }

      var vor = void 0;
      var polygons = null;

      if (hoverMode === modeClosestPoint) {
        var voronoiData = [];
        stackData.forEach(function (series) {
          series.datums.filter(function (d) {
            return d.defined;
          }).forEach(function (datum) {
            datum.pointerPoints.forEach(function (pointerPoint) {
              if (typeof datum.x !== 'number' || typeof datum.y !== 'number') {
                return;
              }
              voronoiData.push({
                x: pointerPoint.x,
                y: pointerPoint.y,
                datums: [datum]
              });
            });
          });
        });

        vor = (0, _d3Voronoi.voronoi)().x(function (d) {
          return d.x;
        }).y(function (d) {
          return d.y;
        }).extent(extent)(voronoiData);
      } else if ([modePrimary, modeSecondary].includes(hoverMode)) {
        // Group all data points based on primaryAxis
        var datumsByAxis = {};

        stackData.forEach(function (series) {
          series.datums.filter(function (d) {
            return d.defined;
          }).forEach(function (datum) {
            var axis = modePrimary ? _Utils2.default.getAxisByAxisID(primaryAxes, series.primaryAxisID) : _Utils2.default.getAxisByAxisID(secondaryAxes, series.secondaryAxisID);
            var axisKey = String(axis.vertical ? datum.y : datum.x);

            datumsByAxis[axisKey] = datumsByAxis[axisKey] || [];
            datumsByAxis[axisKey].push(datum);
          });
        });

        var _voronoiData = [];

        Object.values(datumsByAxis).forEach(function (datums) {
          datums.forEach(function (datum) {
            datum.pointerPoints.forEach(function (pointerPoint) {
              _voronoiData.push({
                x: pointerPoint.x,
                y: pointerPoint.y,
                datums: datums
              });
            });
          });
        });

        vor = (0, _d3Voronoi.voronoi)().x(function (d) {
          return primaryVertical ? 0 : d.x;
        }).y(function (d) {
          return primaryVertical ? d.y : 0;
        }).extent(extent)(_voronoiData);
      } else {
        return null;
      }

      polygons = vor.polygons();

      return _react2.default.createElement(
        VoronoiElement,
        null,
        polygons.map(function (points, i) {
          var path = lineFn(points);
          return _react2.default.createElement(_Path2.default, {
            key: i,
            d: path,
            className: 'action-voronoi',
            onMouseEnter: function onMouseEnter() {
              return _this2.onHover(points.data.datums);
            },
            style: {
              fill: 'rgba(0,0,0,.2)',
              stroke: 'rgba(255,255,255,.5)',
              opacity: showVoronoi ? 1 : 0,
              transition: 'none'
            }
          });
        })
      );
    }
  }, {
    key: 'onHover',
    value: function onHover(datums) {
      // activate the hover with any series or datums
      if (datums) {
        return this.props.dispatch(function (state) {
          return _extends({}, state, {
            hovered: {
              active: true,
              datums: datums
            }
          });
        });
      }
      // If we just left the area, deactive the hover
      return this.props.dispatch(function (state) {
        return _extends({}, state, {
          hovered: _extends({}, state.hovered, {
            active: false
          })
        });
      });
    }
  }]);

  return Voronoi;
}(_react2.default.PureComponent);

Voronoi.defaultProps = {
  onHover: noop,
  onActivate: noop
};
exports.default = (0, _Context.ChartConnect)(function () {
  var selectors = {
    primaryAxes: _Selectors2.default.primaryAxes(),
    secondaryAxes: _Selectors2.default.secondaryAxes()
  };
  return function (state) {
    return {
      primaryAxes: selectors.primaryAxes(state),
      secondaryAxes: selectors.secondaryAxes(state),
      stackData: state.stackData,
      hoverMode: state.hoverMode,
      showVoronoi: state.showVoronoi
    };
  };
})(Voronoi);