'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Utils = require('../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _detectElementResize = require('./detectElementResize');

var _detectElementResize2 = _interopRequireDefault(_detectElementResize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var HyperResponsive = function (_React$Component) {
  _inherits(HyperResponsive, _React$Component);

  function HyperResponsive() {
    _classCallCheck(this, HyperResponsive);

    var _this = _possibleConstructorReturn(this, (HyperResponsive.__proto__ || Object.getPrototypeOf(HyperResponsive)).call(this));

    _this.resize = _Utils2.default.throttle(function () {
      if (!_this.el) {
        return;
      }
      var computed = window.getComputedStyle(_this.el.parentElement);

      var paddingTop = computed.paddingTop,
          paddingBottom = computed.paddingBottom,
          paddingLeft = computed.paddingLeft,
          paddingRight = computed.paddingRight,
          boxSizing = computed.boxSizing,
          borderTopWidth = computed.borderTopWidth,
          borderLeftWidth = computed.borderLeftWidth,
          borderRightWidth = computed.borderRightWidth,
          borderBottomWidth = computed.borderBottomWidth;
      var width = computed.width,
          height = computed.height;


      width = parseInt(width);
      height = parseInt(height);

      if (boxSizing === 'border-box') {
        width -= parseInt(paddingLeft);
        width -= parseInt(paddingRight);
        height -= parseInt(paddingTop);
        height -= parseInt(paddingBottom);

        width -= parseInt(borderLeftWidth);
        width -= parseInt(borderRightWidth);
        height -= parseInt(borderTopWidth);
        height -= parseInt(borderBottomWidth);
      }

      _this.setState({
        width: width,
        height: height
      });
    });

    _this.handleRef = function (el) {
      _this.el = el;
    };

    _this.state = {
      width: 0,
      height: 0
    };
    return _this;
  }

  _createClass(HyperResponsive, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (!this.resizeListener && this.el && this.el.parentElement) {
        this.resizeListener = (0, _detectElementResize2.default)(this.el.parentElement, this.resize);
      }
      this.resize();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.resizeListener) {
        this.resizeListener();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          render = _props.render,
          children = _props.children;
      var _state = this.state,
          width = _state.width,
          height = _state.height;
      var handleRef = this.handleRef;


      return (render || children)({
        handleRef: handleRef,
        width: width,
        height: height
      });
    }
  }]);

  return HyperResponsive;
}(_react2.default.Component);

exports.default = HyperResponsive;