'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Memoize = require('./Memoize');

var _Memoize2 = _interopRequireDefault(_Memoize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  primaryAxes: function primaryAxes() {
    return (0, _Memoize2.default)(function (state) {
      return [state.axes];
    }, function (axes) {
      if (!axes) return [];
      return Object.keys(axes).map(function (key) {
        if (axes[key].primary) {
          return axes[key];
        }
        return null;
      }).filter(Boolean);
    });
  },

  secondaryAxes: function secondaryAxes() {
    return (0, _Memoize2.default)(function (state) {
      return [state.axes];
    }, function (axes) {
      if (!axes) return [];
      return Object.keys(axes).map(function (key) {
        if (!axes[key].primary) {
          return axes[key];
        }
        return null;
      }).filter(Boolean);
    });
  },

  offset: function offset() {
    return (0, _Memoize2.default)(function (state) {
      return [state && state.offset && state.offset.left || 0, state && state.offset && state.offset.top || 0];
    }, function (left, top) {
      return {
        left: left,
        top: top
      };
    });
  },

  gridX: function gridX() {
    return (0, _Memoize2.default)(function (state) {
      return [state && state.padding && state.padding.left || 0, state && state.axisDimensions && state.axisDimensions.left, state && state.axisDimensions && state.axisDimensions.top, state && state.axisDimensions && state.axisDimensions.bottom];
    }, function (paddingLeft, axisDimensionsLeft, axisDimensionsTop, axisDimensionsBottom) {
      var axesLeftWidth = axisDimensionsLeft && sumObjBy(axisDimensionsLeft, 'width') || 0;
      var axesTopLeft = axisDimensionsTop && sumObjBy(axisDimensionsTop, 'left') || 0;
      var axesBottomLeft = axisDimensionsBottom && sumObjBy(axisDimensionsBottom, 'left') || 0;
      return paddingLeft + Math.max(axesLeftWidth, axesTopLeft, axesBottomLeft);
    });
  },

  gridY: function gridY() {
    return (0, _Memoize2.default)(function (state) {
      return [state && state.padding && state.padding.top || 0, state && state.axisDimensions && state.axisDimensions.top, state && state.axisDimensions && state.axisDimensions.left, state && state.axisDimensions && state.axisDimensions.right];
    }, function (paddingTop, axisDimensionsTop, axisDimensionsLeft, axisDimensionsRight) {
      var axesTopHeight = axisDimensionsTop && sumObjBy(axisDimensionsTop, 'height') || 0;
      var axesLeftTop = axisDimensionsLeft && sumObjBy(axisDimensionsLeft, 'top') || 0;
      var axesRightTop = axisDimensionsRight && sumObjBy(axisDimensionsRight, 'top') || 0;
      return paddingTop + Math.max(axesTopHeight, axesLeftTop, axesRightTop);
    });
  },

  gridWidth: function gridWidth() {
    return (0, _Memoize2.default)(function (state) {
      return [state && state.width, state && state.padding, state && state.axisDimensions && state.axisDimensions.top, state && state.axisDimensions && state.axisDimensions.bottom, state && state.axisDimensions && state.axisDimensions.left, state && state.axisDimensions && state.axisDimensions.right];
    }, function (width, padding, axisDimensionsTop, axisDimensionsBottom, axisDimensionsLeft, axisDimensionsRight) {
      var paddingLeft = padding && padding.left || 0;
      var paddingRight = padding && padding.right || 0;
      var axesLeftWidth = axisDimensionsLeft && sumObjBy(axisDimensionsLeft, 'width') || 0;
      var axesRightWidth = axisDimensionsRight && sumObjBy(axisDimensionsRight, 'width') || 0;
      var axesTopLeft = axisDimensionsTop && sumObjBy(axisDimensionsTop, 'left') || 0;
      var axesTopRight = axisDimensionsTop && sumObjBy(axisDimensionsTop, 'right') || 0;
      var axesBottomLeft = axisDimensionsBottom && sumObjBy(axisDimensionsBottom, 'left') || 0;
      var axesBottomRight = axisDimensionsBottom && sumObjBy(axisDimensionsBottom, 'right') || 0;

      return (width || 0) - paddingLeft - paddingRight - Math.max(axesLeftWidth, axesTopLeft, axesBottomLeft) - Math.max(axesRightWidth, axesTopRight, axesBottomRight);
    });
  },

  gridHeight: function gridHeight() {
    return (0, _Memoize2.default)(function (state) {
      return [state && state.height, state && state.padding, state && state.axisDimensions && state.axisDimensions.top, state && state.axisDimensions && state.axisDimensions.bottom, state && state.axisDimensions && state.axisDimensions.left, state && state.axisDimensions && state.axisDimensions.right];
    }, function (height, padding, axisDimensionsTop, axisDimensionsBottom, axisDimensionsLeft, axisDimensionsRight) {
      var paddingTop = padding && padding.top || 0;
      var paddingBottom = padding && padding.right || 0;
      var axesTopHeight = axisDimensionsTop && sumObjBy(axisDimensionsTop, 'height') || 0;
      var axesBottomHeight = axisDimensionsBottom && sumObjBy(axisDimensionsBottom, 'height') || 0;
      var axesLeftTop = axisDimensionsLeft && sumObjBy(axisDimensionsLeft, 'top') || 0;
      var axesLeftBottom = axisDimensionsLeft && sumObjBy(axisDimensionsLeft, 'bottom') || 0;
      var axesRightTop = axisDimensionsRight && sumObjBy(axisDimensionsRight, 'top') || 0;
      var axesRightBottom = axisDimensionsRight && sumObjBy(axisDimensionsRight, 'bottom') || 0;

      return (height || 0) - paddingTop - paddingBottom - Math.max(axesTopHeight, axesLeftTop, axesRightTop) - Math.max(axesBottomHeight, axesLeftBottom, axesRightBottom);
    });
  }
};


function sumObjBy(obj, str) {
  return Object.keys(obj).map(function (key) {
    return obj[key];
  }).reduce(function (prev, curr) {
    return prev + curr[str] || 0;
  }, 0);
}