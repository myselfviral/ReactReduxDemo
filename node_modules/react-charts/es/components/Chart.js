'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

var _HyperResponsive = require('../utils/HyperResponsive');

var _HyperResponsive2 = _interopRequireDefault(_HyperResponsive);

var _Utils = require('../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Debug = require('../utils/Debug');

var Debug = _interopRequireWildcard(_Debug);

var _Context = require('../utils/Context');

var _Rectangle = require('../primitives/Rectangle');

var _Rectangle2 = _interopRequireDefault(_Rectangle);

var _Voronoi = require('../components/Voronoi');

var _Voronoi2 = _interopRequireDefault(_Voronoi);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var debug = process.env.NODE_ENV === 'development';

var Chart = function (_React$Component) {
  _inherits(Chart, _React$Component);

  function Chart(_ref) {
    var interaction = _ref.interaction,
        hoverMode = _ref.hoverMode,
        groupMode = _ref.groupMode,
        showVoronoi = _ref.showVoronoi,
        dark = _ref.dark;

    _classCallCheck(this, Chart);

    var _this = _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).call(this));

    _this.updateDataModel = function (props) {
      var data = props.data,
          width = props.width,
          height = props.height;
      var getSeries = props.getSeries,
          getDatums = props.getDatums,
          getLabel = props.getLabel,
          getSeriesID = props.getSeriesID,
          getPrimary = props.getPrimary,
          getSecondary = props.getSecondary,
          getR = props.getR,
          getPrimaryAxisID = props.getPrimaryAxisID,
          getSecondaryAxisID = props.getSecondaryAxisID;

      // Normalize getters

      getSeries = _Utils2.default.normalizePathGetter(getSeries);
      getDatums = _Utils2.default.normalizePathGetter(getDatums);
      getLabel = _Utils2.default.normalizePathGetter(getLabel);
      getSeriesID = _Utils2.default.normalizePathGetter(getSeriesID);
      getPrimary = _Utils2.default.normalizePathGetter(getPrimary);
      getSecondary = _Utils2.default.normalizePathGetter(getSecondary);
      getR = _Utils2.default.normalizePathGetter(getR);
      getPrimaryAxisID = _Utils2.default.normalizePathGetter(getPrimaryAxisID);
      getSecondaryAxisID = _Utils2.default.normalizePathGetter(getSecondaryAxisID);

      // Check for data
      if (!data) {
        if (debug) Debug.noData(_this);
        return;
      }

      // getSeries
      var series = getSeries(data);

      // Check for data
      if (!series) {
        if (debug) Debug.noData(_this);
        return;
      }

      // First access the data, and provide it to the context
      var preMaterializedData = series.map(function (s, seriesIndex) {
        var seriesID = getSeriesID(s, seriesIndex, data);
        var seriesLabel = getLabel(s, seriesIndex, data);
        var primaryAxisID = getPrimaryAxisID(s, seriesIndex, data);
        var secondaryAxisID = getSecondaryAxisID(s, seriesIndex, data);
        var series = {
          original: s,
          index: seriesIndex,
          id: seriesID,
          label: seriesLabel,
          primaryAxisID: primaryAxisID,
          secondaryAxisID: secondaryAxisID,
          datums: getDatums(s, seriesIndex, data).map(function (d, index) {
            return {
              originalSeries: s,
              seriesIndex: seriesIndex,
              seriesID: seriesID,
              seriesLabel: seriesLabel,
              index: index,
              original: d,
              primary: getPrimary(d, index, s, seriesIndex, data),
              secondary: getSecondary(d, index, s, seriesIndex, data),
              r: getR(d, index, s, seriesIndex, data)
            };
          })
        };
        return series;
      });

      // Provide the preMaterializedData to the chart instance
      _this.state.chartState.dispatch(function (state) {
        return _extends({}, state, {
          preMaterializedData: preMaterializedData,
          width: width,
          height: height
        });
      });
    };

    _this.measure = function (prevProps, prevState) {
      if (!_this.el) {
        return;
      }
      _this.dims = _this.el.getBoundingClientRect();

      var _this$getSelectedStat = _this.getSelectedState(_this.state.chartState),
          offset = _this$getSelectedStat.offset;

      var _this$getSelectedStat2 = _this.getSelectedState(prevState.chartState),
          prevOffset = _this$getSelectedStat2.offset;

      if (prevProps && (offset.left !== prevOffset.left || offset.top !== prevOffset.top)) {
        _this.state.chartState.dispatch(function (state) {
          return _extends({}, state, {
            offset: {
              left: _this.el.offsetLeft,
              top: _this.el.offsetTop
            }
          });
        });
      }
    };

    _this.onMouseMove = _Utils2.default.throttle(function (e) {
      var clientX = e.clientX,
          clientY = e.clientY;

      var _this$getSelectedStat3 = _this.getSelectedState(_this.state.chartState),
          gridX = _this$getSelectedStat3.gridX,
          gridY = _this$getSelectedStat3.gridY;

      _this.state.pointerState.dispatch(function (state) {
        var x = clientX - _this.dims.left - gridX;
        var y = clientY - _this.dims.top - gridY;

        var pointer = _extends({}, state.pointer, {
          active: true,
          x: x,
          y: y,
          dragging: state.pointer && state.pointer.down
        });
        return _extends({}, state, {
          pointer: pointer
        });
      });
    });

    _this.onMouseLeave = function () {
      _this.state.chartState.dispatch(function (state) {
        return _extends({}, state, {
          hovered: _extends({}, state.hovered, {
            active: false
          })
        });
      });
      _this.state.pointerState.dispatch(function (state) {
        return _extends({}, state, {
          pointer: _extends({}, state.pointer, {
            active: false
          })
        });
      });
    };

    _this.onMouseDown = function () {
      document.addEventListener('mouseup', _this.onMouseUp);
      document.addEventListener('mousemove', _this.onMouseMove);

      _this.state.pointerState.dispatch(function (state) {
        return _extends({}, state, {
          pointer: _extends({}, state.pointer, {
            sourceX: state.pointer.x,
            sourceY: state.pointer.y,
            down: true
          })
        });
      });
    };

    _this.onMouseUp = function () {
      document.removeEventListener('mouseup', _this.onMouseUp);
      document.removeEventListener('mousemove', _this.onMouseMove);

      _this.state.pointerState.dispatch(function (state) {
        return _extends({}, state, {
          pointer: _extends({}, state.pointer, {
            down: false,
            dragging: false,
            released: {
              x: state.pointer.x,
              y: state.pointer.y
            }
          })
        });
      });
    };

    _this.state = {
      chartState: {
        hovered: {
          active: false,
          series: null,
          datums: []
        },
        cursors: {},
        axes: {},
        tooltip: {},
        axisDimensions: {},
        interaction: interaction,
        hoverMode: hoverMode,
        groupMode: groupMode,
        showVoronoi: showVoronoi,
        dark: dark,
        dispatch: function dispatch(fn) {
          return _this.setState(function (state) {
            return {
              chartState: fn(state.chartState)
            };
          });
        }
      },
      pointerState: {
        pointer: {},
        dispatch: function dispatch(fn) {
          return _this.setState(function (state) {
            return {
              pointerState: fn(state.pointerState)
            };
          });
        }
      }
    };
    _this.selectors = {
      gridX: _Selectors2.default.gridX(),
      gridY: _Selectors2.default.gridY(),
      offset: _Selectors2.default.offset()
    };
    return _this;
  }

  _createClass(Chart, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      var changes = [];
      ['interaction', 'hoverMode', 'groupMode', 'showVoronoi'].forEach(function (prop) {
        if (prevProps[prop] !== _this2.props[prop]) {
          changes.push(prop);
        }
      });
      if (changes.length) {
        var changeObj = {};
        changes.forEach(function (prop) {
          changeObj[prop] = _this2.props[prop];
        });
        this.state.chartState.dispatch(function (state) {
          return _extends({}, state, changeObj);
        });
      }
      if (_Utils2.default.shallowCompare(prevProps, this.props, ['data', 'width', 'height'])) {
        this.updateDataModel(this.props);
      } else {
        (0, _raf2.default)(function () {
          return _this2.measure(prevProps, prevState);
        });
      }
    }
  }, {
    key: 'getSelectedState',
    value: function getSelectedState(state) {
      return {
        gridX: this.selectors.gridX(state),
        gridY: this.selectors.gridY(state),
        offset: this.selectors.offset(state)
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          width = _props.width,
          height = _props.height,
          handleRef = _props.handleRef,
          children = _props.children,
          className = _props.className;

      var _getSelectedState = this.getSelectedState(this.state.chartState),
          gridX = _getSelectedState.gridX,
          gridY = _getSelectedState.gridY;

      var allChildren = _react2.default.Children.toArray(children);
      var svgChildren = allChildren.filter(function (d) {
        return !d.type.isHtml;
      });
      var htmlChildren = allChildren.filter(function (d) {
        return d.type.isHtml;
      });

      return _react2.default.createElement(
        _Context.ChartProvider,
        { value: this.state.chartState },
        _react2.default.createElement(
          _Context.PointerProvider,
          { value: this.state.pointerState },
          _react2.default.createElement(
            'div',
            {
              ref: handleRef,
              className: 'ReactChart ' + (className || ''),
              style: {
                width: width,
                height: height,
                position: 'relative'
              }
            },
            _react2.default.createElement(
              'svg',
              {
                ref: function ref(el) {
                  _this3.el = el;
                },
                style: {
                  width: width,
                  height: height,
                  overflow: 'visible'
                }
              },
              _react2.default.createElement(
                'g',
                {
                  onMouseEnter: function onMouseEnter(e) {
                    e.persist();
                    _this3.onMouseMove(e);
                  },
                  onMouseMove: function onMouseMove(e) {
                    e.persist();
                    _this3.onMouseMove(e);
                  },
                  onMouseLeave: this.onMouseLeave,
                  onMouseDown: this.onMouseDown,
                  style: {
                    transform: 'translate3d(' + (gridX || 0) + 'px, ' + (gridY || 0) + 'px, 0)'
                  }
                },
                _react2.default.createElement(_Rectangle2.default
                // This is to ensure the pointer always has something to hit
                , { x1: -gridX,
                  x2: width - gridX,
                  y1: -gridY,
                  y2: height - gridY,
                  style: {
                    opacity: 0
                  }
                }),
                _react2.default.createElement(_Voronoi2.default, null),
                svgChildren
              )
            ),
            htmlChildren
          )
        )
      );
    }
  }], [{
    key: 'getDerivedStateFromProps',
    value: function getDerivedStateFromProps(props, state) {
      var data = props.data,
          width = props.width,
          height = props.height;

      if (_Utils2.default.shallowCompare(props, state, ['data', 'width', 'height'])) {
        return {
          chartState: _extends({}, state.chartState, {
            data: data,
            width: width,
            height: height
          })
        };
      }
      return null;
    }
  }]);

  return Chart;
}(_react2.default.Component);

Chart.defaultProps = {
  getSeries: function getSeries(d) {
    return d;
  },
  getDatums: function getDatums(d) {
    return _Utils2.default.isArray(d) ? d : d.datums || d.data;
  },
  getLabel: function getLabel(d, i) {
    return d.label || 'Series ' + (i + 1);
  },
  getSeriesID: function getSeriesID(d, i) {
    return i;
  },
  getPrimary: function getPrimary(d) {
    return _Utils2.default.isArray(d) ? d[0] : d.primary || d.x;
  },
  getSecondary: function getSecondary(d) {
    return _Utils2.default.isArray(d) ? d[1] : d.secondary || d.y;
  },
  getR: function getR(d) {
    return _Utils2.default.isArray(d) ? d[2] : d.radius || d.r;
  },
  getPrimaryAxisID: function getPrimaryAxisID(s) {
    return s.primaryAxisID;
  },
  getSecondaryAxisID: function getSecondaryAxisID(s) {
    return s.secondaryAxisID;
  },
  onHover: function onHover() {},
  interaction: null,
  hoverMode: 'primary',
  groupMode: 'primary',
  showVoronoi: false
};

exports.default = function (props) {
  return _react2.default.createElement(_HyperResponsive2.default, {
    render: function render(_ref2) {
      var handleRef = _ref2.handleRef,
          width = _ref2.width,
          height = _ref2.height;
      return _react2.default.createElement(Chart, _extends({}, props, { width: width, height: height, handleRef: handleRef }));
    }
  });
};